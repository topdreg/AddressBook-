import javax.swing.*;
import java.io.*;
import java.util.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
/**
*
* @author Intergalactic Overlords, University of Oregon, 2014
*
*/
public class BookGUI extends javax.swing.JFrame implements ItemListener{

	/**
 	* Creates new form entry
 	*/
	public Book book;
	DefaultListModel<Contact> listModel = new DefaultListModel<Contact>();
    
	public BookGUI() {
    	book = new Book("newBook");
    	initComponents();
	}
	public BookGUI(String path) throws FileNotFoundException{
    	//this.book = book;
    	File addrBook = new File(path);
    	Scanner input = new Scanner(addrBook);
    	book = new Book(input);
    	initComponents();
   	 
	}

	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

    	sortName = new javax.swing.JCheckBox();
    	sortZip = new javax.swing.JCheckBox();
    	jLabel1 = new javax.swing.JLabel();
    	saveBook = new javax.swing.JButton();
    	deleteBook = new javax.swing.JButton();
    	add = new javax.swing.JButton();
    	edit = new javax.swing.JButton();
    	delete = new javax.swing.JButton();
    	mailingLabel = new javax.swing.JButton();
    	exportContacts = new javax.swing.JButton();
    	importContacts = new javax.swing.JButton();
    	bookTitle = new javax.swing.JLabel();
    	jScrollPane2 = new javax.swing.JScrollPane();
    	contact_display = new javax.swing.JList();
    	contactInfo = new javax.swing.JLabel();

 	 
    	sortName.setText("Name");

    	sortZip.setText("Zip Code");

    	jLabel1.setText("Sort By:");

    	saveBook.setText("Save Book");
    	saveBook.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
                	saveBookActionPerformed(evt);
            	} catch (IOException e) {
                	// TODO Auto-generated catch block
                	e.printStackTrace();
            	}
        	}
    	});

    	deleteBook.setText("Delete Book");
    	deleteBook.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	deleteBookActionPerformed(evt);
        	}
    	});

    	add.setText("Add Contact");
    	add.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	addActionPerformed(evt);
        	}
    	});

    	edit.setText("Edit Contact");
    	edit.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	editActionPerformed(evt);
        	}
    	});

    	delete.setText("Delete Contact");
    	delete.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	deleteActionPerformed(evt, contact_display, listModel);
        	}
    	});

    	mailingLabel.setText("View as Label");
    	mailingLabel.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	mailingLabelActionPerformed(evt, contact_display, listModel);
        	}
    	});

    	exportContacts.setText("Export Contacts");
    	exportContacts.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
                	exportContactsActionPerformed(evt);
            	} catch (IOException e) {
            	}
        	}
    	});

    	importContacts.setText("Import Contacts");
    	importContacts.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
            	importContactsActionPerformed(evt);
        	}
    	});

    	bookTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
    	bookTitle.setText("Address Book");
  	 
    	contact_display.setModel(listModel);
    	contact_display.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
   	 
    	for(int i = 0; i != book.book.size(); i++){
        	listModel.addElement(book.book.get(i));
    	}

    	sortName.addItemListener(this);
    	sortZip.addItemListener(this);
    	ButtonGroup checkboxes = new ButtonGroup();
    	checkboxes.add(sortName);
    	checkboxes.add(sortZip);
   	 
    	jScrollPane2.setViewportView(contact_display);

    	contactInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	contactInfo.setText("Contact Information");


    	javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    	getContentPane().setLayout(layout);
    	layout.setHorizontalGroup(
        	layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        	.addGroup(layout.createSequentialGroup()
            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                	.addGroup(layout.createSequentialGroup()
                    	.addContainerGap()
                    	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                	.addGroup(layout.createSequentialGroup()
                                    	.addComponent(jLabel1)
                                    	.addGap(18, 18, 18)
                                    	.addComponent(sortName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    	.addComponent(sortZip))
                                	.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        	.addComponent(bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))

            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                	.addGroup(layout.createSequentialGroup()
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        	.addGroup(layout.createSequentialGroup()
                            	.addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            	.addComponent(saveBook, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        	.addComponent(contactInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        	.addComponent(mailingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        	.addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        	.addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        	.addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    	.addGap(0, 5, Short.MAX_VALUE))
                	.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        	.addGroup(layout.createSequentialGroup()
                            	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                            	.addComponent(exportContacts))
                        	.addComponent(importContacts, javax.swing.GroupLayout.Alignment.TRAILING))
                    	.addContainerGap())))
    	);
    	layout.setVerticalGroup(
        	layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        	.addGroup(layout.createSequentialGroup()
            	.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                	.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    	.addComponent(bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    	.addGap(18, 18, 18)
                    	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)))
                	.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    	.addComponent(importContacts)
                    	.addGap(10, 10, 10)
                    	.addComponent(exportContacts)))
            	.addGap(15, 15, 15)
            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                	.addComponent(jLabel1)
                	.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    	.addComponent(sortZip)
                    	.addComponent(sortName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
            	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                	.addGroup(layout.createSequentialGroup()
                    	.addComponent(contactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    	.addComponent(add)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    	.addComponent(edit)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    	.addComponent(delete)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    	.addComponent(mailingLabel)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    	.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        	.addComponent(deleteBook)
                        	.addComponent(saveBook)))
                	.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)))
    	);

    	pack();
    	setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents
    
	public void itemStateChanged(ItemEvent e){
    	Object source = e.getItemSelectable();
    	if(source == sortName){
        	listModel.removeAllElements();
        	book.SortByName();
        	for(int i = 0; i != book.book.size(); i++){
            	listModel.addElement(book.book.get(i));
        	}
    	}else if(source == sortZip){
        	listModel.removeAllElements();
        	book.SortByZip();
        	for(int i = 0; i != book.book.size(); i++){
            	listModel.addElement(book.book.get(i));
        	}
    	}
	}

	private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
    	if(!(contact_display.getSelectedIndex() == -1)){
        	EntryGUI e = new EntryGUI((Contact) contact_display.getSelectedValue(), true);
        	e.setVisible(true);
    	}
	}//GEN-LAST:event_editActionPerformed
	private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
    	Contact contact = new Contact("$","$","$","$","$","$","$","$","$");
    	book.addExistingContact(contact);
    	EntryGUI e = new EntryGUI(contact, listModel, false);
    	e.setVisible(true);
	}//GEN-LAST:event_addActionPerformed
    
	private void deleteActionPerformed(java.awt.event.ActionEvent evt, JList contacts, DefaultListModel<Contact> listModel){//GEN-FIRST:event_deleteActionPerformed
    	int selected = contacts.getSelectedIndex();
    	if(selected == -1){
       	 
    	}else{
        	book.book.remove(selected);
        	listModel.remove(selected);
    	}
	}//GEN_LAST:event_deleteActionPerformed

	private void mailingLabelActionPerformed(java.awt.event.ActionEvent evt, JList contacts, DefaultListModel<Contact> listModel){
    	int selected = contacts.getSelectedIndex();
    	if(selected == -1){
        	//Message to select a contact?
    	}else{
        	Contact contact = book.book.get(selected);
       	 
        	String first= "";
        	String last = "";
        	String address1 = "";
        	String address2 = "";
        	String citay = "";
        	String state = "";
        	String zip = "";
       	 
        	if(! contact.First_Name.equals("$")){first = contact.First_Name;}
        	if(! contact.Last_Name.equals("$")){last = contact.Last_Name;}
        	if(! contact.Address1.equals("$")){address1 = contact.Address1;}
        	if(! contact.Address2.equals("$")){address2 = contact.Address2;}
        	if(! contact.City.equals("$")){citay = contact.City;}
        	if(! contact.State.equals("$")){state = contact.State;}
        	if(! contact.Zip.equals("$")){zip = contact.Zip;}
       	 
        	String firstLine = first + " " + last + "\n";
        	String secondLine = address1 + " " + address2 + "\n";
        	String thirdLine = citay + ", " + state + " " + zip;
        	String label = firstLine + secondLine + thirdLine;
        	JOptionPane.showMessageDialog(null, label);
    	}
	}
    
	private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
    	JFileChooser deleteFile = new JFileChooser(System.getProperty("user.dir") + "/addresses");
    	int returnVal = deleteFile.showSaveDialog(null);
    	if(returnVal == JFileChooser.APPROVE_OPTION){
        	String path = deleteFile.getSelectedFile().getAbsolutePath();
        	File file = new File(path);
        	file.delete();
    	}
	}//GEN-LAST:event_deleteBookActionPerformed
    
	private void saveBookActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_saveBookActionPerformed
    	JFileChooser saveFile = new JFileChooser(System.getProperty("user.dir") + "/addresses");
    	int returnVal = saveFile.showSaveDialog(null);
    	if(returnVal == JFileChooser.APPROVE_OPTION){
        	String path = saveFile.getSelectedFile().getAbsolutePath();
        	if(new File(path).exists()){
            	// Overwrite file if it exists.
            	FileWriter write = new FileWriter(path, false);
            	for(int i = 0; i != book.book.size(); i++){
                	Contact contact = book.book.get(i);
                	write.write(contact.First_Name + "," + contact.Last_Name + "," + contact.Address1 + "," + contact.Address2 + "," +
                	contact.City + "," + contact.State + "," + contact.Zip + "," + contact.Number + "," + contact.Email + "\n");
            	}
            	write.close();
        	}else{
            	// Otherwise create a new file.
            	FileWriter write = new FileWriter(path + ".txt");
            	for(int i = 0; i != book.book.size(); i++){
                	Contact contact = book.book.get(i);
                	write.write(contact.First_Name + "," + contact.Last_Name + "," + contact.Address1 + "," + contact.Address2 + "," +
                        	contact.City + "," + contact.State + "," + contact.Zip + "," + contact.Number + "," + contact.Email + "\n");
            	}
            	write.close();
        	}
    	}
	}//GEN-LAST:event_saveBookActionPerformed

	private void importContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importContactsActionPerformed
    	boolean match = false;
    	JFileChooser importFile = new JFileChooser(System.getProperty("user.dir") + "/addresses");
    	int returnVal = importFile.showSaveDialog(null);
    	if(returnVal == JFileChooser.APPROVE_OPTION){
        	String path = importFile.getSelectedFile().getAbsolutePath();
        	File file = new File(path);
        	try {
            	Scanner input = new Scanner(file);
            	Book tempBook = new Book(input);
            	for(int i = 0; i != tempBook.book.size(); i++){
                	Contact contact1 = tempBook.book.get(i);
                	for(int j = 0; j != book.book.size(); j++){
                    	Contact contact2 = book.book.get(j);
                    	if(contact1.First_Name.equalsIgnoreCase(contact2.First_Name) && contact1.Last_Name.equalsIgnoreCase(contact2.Last_Name)){
                        	match = true;
                    	}
                	}
                	if(!match){
                    	book.book.add(contact1);
                    	listModel.addElement(contact1);
                	}
                	match = false;
            	}
        	} catch (FileNotFoundException e) {}  
    	}
    	listModel.removeAllElements();
    	book.SortByZip();
    	for(int i = 0; i != book.book.size(); i++){
        	listModel.addElement(book.book.get(i));
    	}
	}//GEN-LAST:event_importContactsActionPerformed

    	private void exportContactsActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_exportContactsActionPerformed
    	boolean match = false;
    	JFileChooser exportFile = new JFileChooser(System.getProperty("user.dir") + "/addresses");
    	int returnVal = exportFile.showSaveDialog(null);
    	if(returnVal == JFileChooser.APPROVE_OPTION){
        	String path = exportFile.getSelectedFile().getAbsolutePath();
        	File file = new File(path);
        	try{
            	Scanner input = new Scanner(file);
            	Book tempBook = new Book(input);
            	for(int i = 0; i != book.book.size(); i++){
                	Contact contact1 = book.book.get(i);
                	for(int j = 0; j != tempBook.book.size(); j++){
                    	Contact contact2 = tempBook.book.get(j);
                    	if(contact1.First_Name.equalsIgnoreCase(contact2.First_Name) && contact1.Last_Name.equalsIgnoreCase(contact2.Last_Name)){
                        	match = true;
                    	}
                	}
                	if(!match){
                    	tempBook.book.add(contact1);
                	}
                	match = false;
            	}
            	// Write the tempBook back to its file.
            	FileWriter write = new FileWriter(path, false);
            	for(int i = 0; i != tempBook.book.size(); i++){
                	Contact contact = tempBook.book.get(i);
                	write.write(contact.First_Name + "," + contact.Last_Name + "," + contact.Address1 + "," + contact.Address2 + "," +
                	contact.City + "," + contact.State + "," + contact.Zip + "," + contact.Number + "," + contact.Email + "\n");
            	}
            	write.close();
        	}catch (FileNotFoundException e){
           	 
        	}
    	}   	 
	}//GEN-LAST:event_exportContactsActionPerformed

	/**
 	* @param args the command line arguments
 	*/
	public static void main(String args[]) {
    	/* Set the Nimbus look and feel */
    	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     	* For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     	*/
    	try {
        	for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            	if ("Nimbus".equals(info.getName())) {
                	javax.swing.UIManager.setLookAndFeel(info.getClassName());
                	break;
            	}
        	}
    	} catch (ClassNotFoundException ex) {
        	java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    	} catch (InstantiationException ex) {
        	java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    	} catch (IllegalAccessException ex) {
        	java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
        	java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    	}
    	//</editor-fold>

    	/* Create and display the form */
    	java.awt.EventQueue.invokeLater(new Runnable() {
        	public void run() {
            	new BookGUI().setVisible(true);
        	}
    	});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton add;
	private javax.swing.JLabel bookTitle;
	private javax.swing.JLabel contactInfo;
	private javax.swing.JList contact_display;
	private javax.swing.JButton delete;
	private javax.swing.JButton deleteBook;
	private javax.swing.JButton edit;
	private javax.swing.JButton exportContacts;
	private javax.swing.JButton importContacts;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JButton mailingLabel;
	private javax.swing.JButton saveBook;
	private javax.swing.JCheckBox sortName;
	private javax.swing.JCheckBox sortZip;
	// End of variables declaration//GEN-END:variables
}



